{"version":3,"file":"static/js/413.99674b43.chunk.js","mappings":"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","sources":["api/api.js","api/buildingesApi.js","components/Loader/CustomLoader.js","views/Building/NewBuildingsModal.jsx","views/Building/Buildings.jsx"],"sourcesContent":["import { create } from \"apisauce\";\nimport settings from \"../config/settings\";\n\nconst api = create({ baseURL: settings.apiUrl });\n\napi.addAsyncRequestTransform(async (request) => {\n  const authToken = await localStorage[\"token\"];\n\n  if (!authToken) return;\n\n  request.headers[\"Authorization\"] = `bearer ${authToken}`;\n});\n\nexport default api;\n","import api from \"./api\";\n\nconst endPoint = \"/buildings\";\n\nconst add = (building) => api.post(endPoint, building);\nconst update = (id, building) => api.put(endPoint + \"/\" + id, building);\nconst getAll = () => api.get(endPoint);\n\nexport default { add, update, getAll };\n","import { MDBSpinner } from \"mdb-react-ui-kit\";\n\nconst CustomLoader = ({ children, isLoading }) => {\n  return (\n    <>\n      {isLoading ? (\n        <div className=\"text-center\">\n          <MDBSpinner color=\"primary\" size=\"lg\" />\n        </div>\n      ) : (\n        children\n      )}\n    </>\n  );\n};\n\nexport default CustomLoader;\n","import FontAwesome from \"react-fontawesome\";\nimport { Formik } from \"formik\";\n\nimport { Modal, Button } from \"react-bootstrap\";\nimport { TextField, TextAreaField, SubmitBtn } from \"../../components/Form\";\n\nconst NewBuildingsModal = ({\n  show,\n  setShow,\n  building,\n  schema,\n  handleSubmit,\n}) => {\n  return (\n    <Formik\n      enableReinitialize={true}\n      initialValues={building}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      {() => (\n        <>\n          <Modal show={show}>\n            <Modal.Header>\n              <Modal.Title>\n                {building.id === 0 ? \"New Building\" : \"Update Building\"}\n              </Modal.Title>\n              <Button\n                size=\"sm\"\n                variant=\"light\"\n                className=\"float-right\"\n                onClick={() => setShow(false)}\n              >\n                <FontAwesome style={{ fontSize: 15 }} name=\"fas fa-close\" />\n              </Button>\n            </Modal.Header>\n            <Modal.Body>\n              <TextField name=\"name\" label=\"Name\" required />\n              <TextAreaField name=\"address\" label=\"Address\" required />\n            </Modal.Body>\n            <Modal.Footer>\n              <Button onClick={() => setShow(false)} className=\"btn-secondary\">\n                Close\n              </Button>\n              <SubmitBtn title={building.id === 0 ? \"Create\" : \"Update\"} />\n            </Modal.Footer>\n          </Modal>\n        </>\n      )}\n    </Formik>\n  );\n};\n\nexport default NewBuildingsModal;\n","import { useState, useEffect } from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\nimport FontAwesome from \"react-fontawesome\";\nimport { toast } from \"react-toastify\";\nimport { MDBDataTableV5 } from \"mdbreact\";\nimport * as Yup from \"yup\";\nimport jwt from \"jwt-decode\";\n\nimport CustomLoader from \"../../components/Loader/CustomLoader\";\nimport NewBuildingsModal from \"./NewBuildingsModal\";\nimport buildingesApi from \"../../api/buildingesApi\";\n\nconst schema = Yup.object({\n  id: Yup.number(),\n  name: Yup.string().required().label(\"Building Name\"),\n  address: Yup.string().required().label(\"Address\"),\n});\n\nconst Buildings = () => {\n  const [show, setShow] = useState(false);\n  const [buildings, setBuildings] = useState([]);\n  const [building, setBuilding] = useState({\n    id: 0,\n    name: \"\",\n    address: \"\",\n  });\n  const [tableHeaders] = useState([\n    { label: \"Name\", field: \"name\" },\n    { label: \"Address\", field: \"address\" },\n    { label: \"\", field: \"edit\" },\n  ]);\n  const [isLoading, setIsLoading] = useState(false);\n  const user = jwt(localStorage[\"token\"]);\n\n  const handleLoad = async () => {\n    setIsLoading(true);\n    const { status, data } = await buildingesApi.getAll();\n    setIsLoading(false);\n\n    if (status !== 200) return toast.error(\"Network Error\");\n\n    setBuildings([...data]);\n  };\n  const handleSubmit = async (building, { resetForm }) => {\n    resetForm();\n    setShow(false);\n    setIsLoading(true);\n\n    if (building.id === 0) {\n      const response = await buildingesApi.add({\n        ...building,\n      });\n      setIsLoading(false);\n\n      if (response.ok) {\n        toast.info(\"Successful Registered.\");\n        setShow(false);\n        return setBuildings([response.data, ...buildings]);\n      }\n\n      if (response.status === 400)\n        return toast.error(\"This building is already exist!\");\n\n      toast.error(\"Something went wrong\");\n    } else {\n      const response = await buildingesApi.update(building.id, building);\n      setIsLoading(false);\n\n      if (response.ok) {\n        toast.info(\"Successful Updates.\");\n        setShow(false);\n        return setBuildings([\n          response.data,\n          ...buildings.filter((c) => c.id !== building.id),\n        ]);\n      }\n      toast.error(\"Something went wrong\");\n    }\n  };\n  const handleEdit = (custom) => {\n    const cust = { ...custom };\n    delete cust.edit;\n    setBuilding(cust);\n    setShow(true);\n  };\n  const handleShow = () => {\n    setShow(true);\n    setBuilding({\n      id: 0,\n      name: \"\",\n      address: \"\",\n    });\n  };\n\n  useEffect(() => {\n    handleLoad();\n  }, [building]);\n\n  return (\n    <>\n      <NewBuildingsModal\n        show={show}\n        setShow={setShow}\n        building={building}\n        schema={schema}\n        handleSubmit={handleSubmit}\n      />\n      <Card>\n        <Card.Header>\n          {user.role === \"admin\" ? (\n            <Button\n              className=\"float-right\"\n              onClick={handleShow}\n              disabled={isLoading}\n            >\n              <FontAwesome name=\"fas fa-plus-circle\" /> New Building\n            </Button>\n          ) : null}\n          <Card.Title>Buildings</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <CustomLoader isLoading={isLoading}>\n            <MDBDataTableV5\n              hover\n              entriesOptions={[10, 25, 50, 100, 250, 500, 1000]}\n              entries={10}\n              pagesAmount={10}\n              data={{\n                columns: tableHeaders,\n                rows: buildings.map((rom) => {\n                  rom.edit = (\n                    <>\n                      {user.role === \"admin\" ? (\n                        <Button\n                          onClick={() => handleEdit(rom)}\n                          className=\"btn-light btn-sm\"\n                        >\n                          <FontAwesome\n                            className=\"fas fa-edit text-primary\"\n                            style={{ fontSize: 17 }}\n                            name=\"edit\"\n                          />\n                        </Button>\n                      ) : null}\n                    </>\n                  );\n                  return rom;\n                }),\n              }}\n              pagingTop\n              searchTop\n              searchBottom={false}\n              fullPagination\n            />\n          </CustomLoader>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nexport default Buildings;\n"],"names":["api","create","baseURL","settings","apiUrl","addAsyncRequestTransform","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","authToken","wrap","_context","prev","next","localStorage","sent","abrupt","headers","concat","stop","_x","apply","arguments","endPoint","add","building","post","update","id","put","getAll","get","children","isLoading","_jsx","_Fragment","className","MDBSpinner","color","size","show","setShow","schema","handleSubmit","Formik","enableReinitialize","initialValues","validationSchema","onSubmit","_jsxs","Modal","Header","Title","Button","variant","onClick","FontAwesome","style","fontSize","name","Body","TextField","label","required","TextAreaField","Footer","SubmitBtn","title","Yup","address","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","buildings","setBuildings","_useState5","_useState6","setBuilding","_useState7","field","tableHeaders","_useState9","_useState10","setIsLoading","user","jwt","handleLoad","_yield$buildingesApi$","status","data","buildingesApi","toast","error","_toConsumableArray","_ref3","_callee2","_ref2","response","_response","_context2","resetForm","_objectSpread","ok","info","filter","c","_x2","useEffect","NewBuildingsModal","Card","role","disabled","CustomLoader","MDBDataTableV5","hover","entriesOptions","entries","pagesAmount","columns","rows","map","rom","edit","custom","cust","handleEdit","pagingTop","searchTop","searchBottom","fullPagination"],"sourceRoot":""}